#include <QCoreApplication>
#include <QDebug>
#include <QTimer>
#include "../service/ConcurrentDownloadManager.h"
#include "../common/AppConfig.h"
#include "../data/DatabaseManager.h"

class ConcurrentDownloadExample : public QObject {
    Q_OBJECT

public:
    explicit ConcurrentDownloadExample(QObject* parent = nullptr) : QObject(parent) {}

    void demonstrateConcurrentDownload() {
        qDebug() << "=== Âπ∂Âèë‰∏ãËΩΩÁ§∫‰æã ===\n";

        // ÂàõÂª∫Âπ∂Âèë‰∏ãËΩΩÁÆ°ÁêÜÂô®
        m_manager = new ConcurrentDownloadManager(this);

        // ÈÖçÁΩÆÂπ∂Âèë‰∏ãËΩΩÂèÇÊï∞
        ConcurrentDownloadConfig config = ConcurrentDownloadConfig::getAggressive(); // ‰ΩøÁî®ÊøÄËøõÈÖçÁΩÆ
        m_manager->setConfig(config);

        qDebug() << "ÈÖçÁΩÆ‰ø°ÊÅØ:";
        qDebug() << "  ÊúÄÂ§ßÂπ∂ÂèëÊï∞:" << config.maxConcurrentDownloads;
        qDebug() << "  ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞:" << config.maxRetryCount;
        qDebug() << "  ‰ªªÂä°Ë∂ÖÊó∂Êó∂Èó¥:" << config.taskTimeoutMs << "ÊØ´Áßí";

        // ËøûÊé•ÂÖ≥ÈîÆ‰ø°Âè∑
        connect(m_manager, &ConcurrentDownloadManager::taskCompleted,
            this, &ConcurrentDownloadExample::onTaskCompleted);
        connect(m_manager, &ConcurrentDownloadManager::taskFailed,
            this, &ConcurrentDownloadExample::onTaskFailed);
        connect(m_manager, &ConcurrentDownloadManager::allTasksCompleted,
            this, &ConcurrentDownloadExample::onAllCompleted);

        // Ê®°ÊãüÁî®Êà∑ÂØºÂÖ•Êí≠ÊîæÂàóË°®ÁöÑÂú∫ÊôØ
        QStringList playlistItems = {
            "BV1xx411c7mD",
            "BV1GJ411x7h7",
            "BV1ef4y1H7h5",
            "BV1Lx411G7kP",
            "BV1mx41137Xx"
        };

        qDebug() << "\nÊ®°ÊãüÂØºÂÖ•Êí≠ÊîæÂàóË°®ÔºåÂåÖÂê´" << playlistItems.size() << "È¶ñÊ≠åÊõ≤Ôºö";

        // ÊâπÈáèÊ∑ªÂä†‰ªªÂä°ÔºàÊ®°ÊãüÂØºÂÖ•Êó∂Ê£ÄÊµãÂπ∂‰∏ãËΩΩ‰∏çÂ≠òÂú®ÁöÑÊ≠åÊõ≤Ôºâ
        DownloadOptions options = DownloadOptions::createPreset("high_quality_mp3");
        QStringList taskIds = m_manager->addBatchTasks(playlistItems, options);

        qDebug() << "ÂÆûÈôÖÈúÄË¶Å‰∏ãËΩΩÁöÑÊ≠åÊõ≤Êï∞Èáè:" << taskIds.size();
        qDebug() << "\nÂºÄÂßãÂπ∂Âèë‰∏ãËΩΩ...\n";

        // ÂêØÂä®ÂÆöÊó∂ÁªüËÆ°ÊòæÁ§∫
        QTimer* statsTimer = new QTimer(this);
        connect(statsTimer, &QTimer::timeout, this, &ConcurrentDownloadExample::showProgress);
        statsTimer->start(3000); // ÊØè3ÁßíÊòæÁ§∫‰∏ÄÊ¨°ËøõÂ∫¶

        m_totalTasks = taskIds.size();
    }

private slots:
    void onTaskCompleted(const QString& taskId, const Song& song) {
        m_completedCount++;
        qDebug() << QString("‚úÖ [%1/%2] ÂÆåÊàê‰∏ãËΩΩ: %3")
            .arg(m_completedCount)
            .arg(m_totalTasks)
            .arg(song.getTitle());
    }

    void onTaskFailed(const QString& taskId, const QString& error) {
        m_failedCount++;
        DownloadTaskState task = m_manager->getTask(taskId);
        qDebug() << QString("‚ùå [%1/%2] ‰∏ãËΩΩÂ§±Ë¥•: %3 - %4")
            .arg(m_completedCount + m_failedCount)
            .arg(m_totalTasks)
            .arg(task.getIdentifier())
            .arg(error);
    }

    void onAllCompleted() {
        qDebug() << "\nüéâ Êí≠ÊîæÂàóË°®ÂØºÂÖ•ÂÆåÊàêÔºÅ";

        auto stats = m_manager->getStatistics();
        qDebug() << "\nüìä ÂØºÂÖ•ÁªìÊûúÁªüËÆ°:";
        qDebug() << "  ÊàêÂäü:" << stats.completedTasks << "È¶ñ";
        qDebug() << "  Â§±Ë¥•:" << stats.failedTasks << "È¶ñ";
        qDebug() << "  ÊàêÂäüÁéá:" << QString::number((double)stats.completedTasks / stats.totalTasks * 100, 'f', 1) + "%";

        if (stats.averageDownloadTimeMs > 0) {
            qDebug() << "  Âπ≥Âùá‰∏ãËΩΩÊó∂Èó¥:" << QString::number(stats.averageDownloadTimeMs / 1000.0, 'f', 1) << "Áßí";
        }

        QTimer::singleShot(2000, []() { QCoreApplication::quit(); });
    }

    void showProgress() {
        auto stats = m_manager->getStatistics();

        if (stats.totalTasks > 0) {
            qDebug() << QString("üìà ËøõÂ∫¶Êõ¥Êñ∞: %1% (%2/%3 ÂÆåÊàê, %4 ËøõË°å‰∏≠, %5 Á≠âÂæÖ‰∏≠)")
                .arg(QString::number(stats.overallProgress * 100, 'f', 1))
                .arg(stats.completedTasks)
                .arg(stats.totalTasks)
                .arg(stats.activeTasks)
                .arg(stats.pendingTasks);
        }
    }

private:
    ConcurrentDownloadManager* m_manager;
    int m_totalTasks = 0;
    int m_completedCount = 0;
    int m_failedCount = 0;
};

int main(int argc, char* argv[])
{
    QCoreApplication app(argc, argv);

    // ÂàùÂßãÂåñ
    AppConfig::instance().loadConfig();
    DatabaseManager::instance().initialize();

    if (!AppConfig::instance().isYtDlpAvailable()) {
        qDebug() << "‚ùå yt-dlp ‰∏çÂèØÁî®ÔºåËØ∑ÂÖàÈÖçÁΩÆ yt-dlp Ë∑ØÂæÑ";
        return 1;
    }

    ConcurrentDownloadExample example;
    QTimer::singleShot(500, &example, &ConcurrentDownloadExample::demonstrateConcurrentDownload);

    return app.exec();
}

#include "concurrent_download_example.moc"
