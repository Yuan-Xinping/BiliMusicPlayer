// ui/pages/DownloadManagerPage.cpp
#include "DownloadManagerPage.h"
#include "../components/DownloadTaskItem.h"
#include "../../common/AppConfig.h"

#include <QDesktopServices>
#include <QUrl>
#include <QMessageBox>
#include <QDateTime>
#include <QHeaderView>
#include <QDebug>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QLabel>
#include <QLineEdit>
#include <QComboBox>
#include <QPushButton>
#include <QTabWidget>
#include <QListWidget>
#include <QTableWidget>

DownloadManagerPage::DownloadManagerPage(DownloadService* downloadService, QWidget* parent)
    : QWidget(parent)
    , m_downloadService(downloadService)
{
    if (!m_downloadService) {
        qCritical() << "‚ùå DownloadManagerPage: DownloadService ‰∏∫Á©∫ÔºÅ";
        return;
    }

    qDebug() << "üîß DownloadManagerPage ÊûÑÈÄ†ÂáΩÊï∞ÂºÄÂßã...";

    setupUI();
    setupConnections();
    setupStyles();
    loadDefaultSettings();

    QString downloadPath = AppConfig::instance().getDownloadPath();
    qDebug() << "====================================";
    qDebug() << "üìÅ ÂΩìÂâç‰∏ãËΩΩË∑ØÂæÑÔºö" << downloadPath;
    qDebug() << "====================================";

    // Âú®Áä∂ÊÄÅÊ†èÊòæÁ§∫‰∏ãËΩΩË∑ØÂæÑ
    m_statusLabel->setText(QString("üí§ Á≠âÂæÖ‰ªªÂä° | üìÅ %1").arg(downloadPath));
}

void DownloadManagerPage::setupUI()
{
    qDebug() << "üîß DownloadManagerPage::setupUI() ÂºÄÂßã...";

    QVBoxLayout* mainLayout = new QVBoxLayout(this);
    mainLayout->setContentsMargins(20, 20, 20, 20);
    mainLayout->setSpacing(20);

    // ========== ËæìÂÖ•Âå∫Âüü ==========
    QGroupBox* inputGroup = new QGroupBox("üì• Êñ∞Âª∫‰∏ãËΩΩ");
    inputGroup->setObjectName("downloadInputGroup");

    QVBoxLayout* inputLayout = new QVBoxLayout(inputGroup);
    inputLayout->setSpacing(12);

    // URL ËæìÂÖ•Ë°å
    QHBoxLayout* urlLayout = new QHBoxLayout();
    QLabel* urlLabel = new QLabel("BVÂè∑/URL:");
    urlLabel->setFixedWidth(80);
    urlLabel->setObjectName("inputLabel");
    urlLabel->setStyleSheet("color: #CCCCCC; font-size: 13px;"); 

    m_urlInput = new QLineEdit();
    m_urlInput->setPlaceholderText("ËæìÂÖ• BV Âè∑ÊàñÂÆåÊï¥ URLÔºå‰æãÂ¶ÇÔºöBV1xx411c7mD");
    m_urlInput->setObjectName("urlInput");

    urlLayout->addWidget(urlLabel);
    urlLayout->addWidget(m_urlInput);

    qDebug() << "  - URL ËæìÂÖ•Ê°ÜÂ∑≤ÂàõÂª∫";

    // Èü≥Ë¥®ÈÄâÊã©Ë°å
    QHBoxLayout* qualityLayout = new QHBoxLayout();
    QLabel* qualityLabel = new QLabel("Èü≥Ë¥®ÈÄâÊã©:");
    qualityLabel->setFixedWidth(80);
    qualityLabel->setObjectName("inputLabel"); 
    qualityLabel->setStyleSheet("color: #CCCCCC; font-size: 13px;");

    qDebug() << "  - Ê≠£Âú®ÂàõÂª∫Èü≥Ë¥®ÈÄâÊã©Âô®...";
    m_qualityCombo = new QComboBox();

    m_qualityCombo->addItem("üåü ÊúÄ‰Ω≥Èü≥Ë¥® (Ëá™Âä®)", "best_quality");
    m_qualityCombo->addItem("üéº Êó†ÊçüÈü≥Ë¥® WAV", "lossless_wav");
    m_qualityCombo->addItem("üéµ Êó†ÊçüÈü≥Ë¥® FLAC", "lossless_flac");
    m_qualityCombo->addItem("üéß È´òÂìÅË¥® MP3 (320kbps)", "high_quality_mp3");
    m_qualityCombo->addItem("üé∂ Ê†áÂáÜ MP3 (192kbps)", "medium_quality_mp3");
    m_qualityCombo->addItem("üéπ Â∞èÊñá‰ª∂ OPUS", "small_size_opus");

    m_qualityCombo->setObjectName("qualityCombo");
    qDebug() << "  - Èü≥Ë¥®ÈÄâÊã©Âô®Â∑≤ÂàõÂª∫ÔºåÈÄâÈ°πÊï∞Èáè:" << m_qualityCombo->count();

    qualityLayout->addWidget(qualityLabel);
    qualityLayout->addWidget(m_qualityCombo);
    qualityLayout->addStretch();

    // ÊåâÈíÆË°å
    QHBoxLayout* buttonLayout = new QHBoxLayout();
    m_startBtn = new QPushButton("üöÄ ÂºÄÂßã‰∏ãËΩΩ");
    m_startBtn->setObjectName("startDownloadBtn");
    m_startBtn->setFixedHeight(40);

    m_batchDownloadBtn = new QPushButton("üìã ÊâπÈáè‰∏ãËΩΩ");
    m_batchDownloadBtn->setObjectName("batchDownloadBtn");
    m_batchDownloadBtn->setFixedHeight(40);

    qDebug() << "  - ÊåâÈíÆÂ∑≤ÂàõÂª∫";

    buttonLayout->addWidget(m_startBtn);
    buttonLayout->addWidget(m_batchDownloadBtn);
    buttonLayout->addStretch();

    inputLayout->addLayout(urlLayout);
    inputLayout->addLayout(qualityLayout);
    inputLayout->addLayout(buttonLayout);

    // ========== ‰ªªÂä°ÊòæÁ§∫Âå∫Âüü ==========
    m_tabWidget = new QTabWidget();
    m_tabWidget->setObjectName("downloadTabWidget");

    // ‰∏ãËΩΩÈòüÂàó Tab
    m_queueList = new QListWidget();
    m_queueList->setObjectName("downloadQueueList");
    m_queueList->setSpacing(8);
    m_queueList->setVerticalScrollMode(QAbstractItemView::ScrollPerPixel);
    m_tabWidget->addTab(m_queueList, "‚è≥ ‰∏ãËΩΩÈòüÂàó");

    // ‰∏ãËΩΩÂéÜÂè≤ Tab
    m_historyTable = new QTableWidget();
    m_historyTable->setObjectName("downloadHistoryTable");
    m_historyTable->setColumnCount(5);
    m_historyTable->setHorizontalHeaderLabels({
        "Áä∂ÊÄÅ", "Ê≠åÊõ≤Ê†áÈ¢ò", "Ëâ∫ÊúØÂÆ∂", "ÂÆåÊàêÊó∂Èó¥", "Â§áÊ≥®"
        });
    m_historyTable->horizontalHeader()->setStretchLastSection(true);
    m_historyTable->setEditTriggers(QAbstractItemView::NoEditTriggers);
    m_historyTable->setSelectionBehavior(QAbstractItemView::SelectRows);
    m_tabWidget->addTab(m_historyTable, "üìã ‰∏ãËΩΩÂéÜÂè≤");

    QHBoxLayout* statusLayout = new QHBoxLayout();

    m_statusLabel = new QLabel("üí§ Á≠âÂæÖ‰∏ãËΩΩ‰ªªÂä°...");
    m_statusLabel->setObjectName("downloadStatusLabel");

    QPushButton* openFolderBtn = new QPushButton("üìÅ ÊâìÂºÄ‰∏ãËΩΩÊñá‰ª∂Â§π");
    openFolderBtn->setObjectName("openFolderBtn");
    openFolderBtn->setFixedHeight(35);
    connect(openFolderBtn, &QPushButton::clicked, [this]() {
        QString downloadPath = AppConfig::instance().getDownloadPath();
        QDesktopServices::openUrl(QUrl::fromLocalFile(downloadPath));
        });

    QPushButton* clearHistoryBtn = new QPushButton("üóëÔ∏è Ê∏ÖÁ©∫ÂéÜÂè≤");
    clearHistoryBtn->setObjectName("controlBtn");
    clearHistoryBtn->setFixedHeight(35);
    connect(clearHistoryBtn, &QPushButton::clicked, [this]() {
        auto reply = QMessageBox::question(
            this, "Á°ÆËÆ§Ê∏ÖÁ©∫", "Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ÊâÄÊúâ‰∏ãËΩΩÂéÜÂè≤ËÆ∞ÂΩïÂêóÔºü",
            QMessageBox::Yes | QMessageBox::No
        );
        if (reply == QMessageBox::Yes) {
            m_historyTable->setRowCount(0);
            m_statusLabel->setText("üóëÔ∏è ÂéÜÂè≤ËÆ∞ÂΩïÂ∑≤Ê∏ÖÁ©∫");
        }
        });

    statusLayout->addWidget(m_statusLabel);
    statusLayout->addStretch();
    statusLayout->addWidget(openFolderBtn);
    statusLayout->addWidget(clearHistoryBtn);

    // ========== Ê∑ªÂä†Âà∞‰∏ªÂ∏ÉÂ±Ä ==========
    mainLayout->addWidget(inputGroup);
    mainLayout->addWidget(m_tabWidget, 1);
    mainLayout->addLayout(statusLayout);
}

void DownloadManagerPage::setupConnections()
{
    // UI ÊåâÈíÆ‰ø°Âè∑
    connect(m_startBtn, &QPushButton::clicked,
        this, &DownloadManagerPage::onStartDownloadClicked);

    // DownloadService ‰ø°Âè∑
    connect(m_downloadService, &DownloadService::taskAdded,
        this, &DownloadManagerPage::onTaskAdded);
    connect(m_downloadService, &DownloadService::taskStarted,
        this, &DownloadManagerPage::onTaskStarted);
    connect(m_downloadService, &DownloadService::taskProgress,
        this, &DownloadManagerPage::onTaskProgress);
    connect(m_downloadService, &DownloadService::taskCompleted,
        this, &DownloadManagerPage::onTaskCompleted);
    connect(m_downloadService, &DownloadService::taskFailed,
        this, &DownloadManagerPage::onTaskFailed);
    connect(m_downloadService, &DownloadService::taskSkipped,
        this, &DownloadManagerPage::onTaskSkipped);
}

void DownloadManagerPage::onTaskSkipped(const QString& identifier, const Song& existingSong)
{
    qDebug() << "ÂâçÁ´ØÊî∂Âà∞Ë∑≥Ëøá‰ø°Âè∑:" << identifier;

    // ÊòæÁ§∫ÂèãÂ•ΩÁöÑÊèêÁ§∫Ê°Ü
    QMessageBox msgBox(this);
    msgBox.setIcon(QMessageBox::Information);
    msgBox.setWindowTitle("Ê≠åÊõ≤Â∑≤Â≠òÂú®");
    msgBox.setText(QString("üìÄ Ê≠åÊõ≤„Ää%1„ÄãÂ∑≤Â≠òÂú®‰∫éÈü≥‰πêÂ∫ì‰∏≠").arg(existingSong.getTitle()));
    msgBox.setInformativeText(QString(
        "Ëâ∫ÊúØÂÆ∂: %1\n"
        "Êó∂Èïø: %2 Áßí\n"
        "‰∏ãËΩΩÊó•Êúü: %3\n\n"
        "Êñá‰ª∂‰ΩçÁΩÆ:\n%4"
    ).arg(existingSong.getArtist())
        .arg(existingSong.getDurationSeconds())
        .arg(existingSong.getDownloadDate().toString("yyyy-MM-dd HH:mm"))
        .arg(existingSong.getLocalFilePath()));

    msgBox.setStandardButtons(QMessageBox::Ok);

    // Ê†∑ÂºèÁæéÂåñ
    msgBox.setStyleSheet(R"(
        QMessageBox {
            background-color: #2A2A2A;
            color: #FFFFFF;
        }
        QLabel {
            color: #FFFFFF;
            font-size: 13px;
        }
        QPushButton {
            background-color: #FB7299;
            color: #FFFFFF;
            border: none;
            border-radius: 6px;
            padding: 8px 20px;
            min-width: 80px;
        }
        QPushButton:hover {
            background-color: #FF8BB5;
        }
    )");

    msgBox.exec();

    // Êõ¥Êñ∞Áä∂ÊÄÅÊ†è
    m_statusLabel->setText(QString("‚ÑπÔ∏è Ê≠åÊõ≤„Ää%1„ÄãÂ∑≤Â≠òÂú®ÔºåÂ∑≤Ë∑≥Ëøá").arg(existingSong.getTitle()));

    // Ê∏ÖÁ©∫ËæìÂÖ•Ê°Ü
    m_urlInput->clear();
}

void DownloadManagerPage::setupStyles()
{
   
}

bool DownloadManagerPage::validateInput() const
{
    QString url = m_urlInput->text().trimmed();
    if (url.isEmpty()) {
        QMessageBox::warning(const_cast<DownloadManagerPage*>(this),
            "ËæìÂÖ•ÈîôËØØ", "ËØ∑ËæìÂÖ• BV Âè∑Êàñ URLÔºÅ");
        return false;
    }
    return true;
}

void DownloadManagerPage::onStartDownloadClicked()
{
    if (!validateInput()) return;

    QString identifier = m_urlInput->text().trimmed();
    QString preset = m_qualityCombo->currentData().toString();

    qDebug() << "Ê∑ªÂä†‰∏ãËΩΩ‰ªªÂä°:" << identifier << "Èü≥Ë¥®:" << preset;

    m_downloadService->addDownloadTask(identifier, preset);
    m_urlInput->clear();
    m_tabWidget->setCurrentIndex(0);
}

void DownloadManagerPage::onTaskAdded(const DownloadService::DownloadTask& task)
{
    qDebug() << "‰ªªÂä°Â∑≤Ê∑ªÂä†:" << task.identifier;
    addTaskToQueue(task);

    int queueSize = m_downloadService->getQueueSize();
    m_statusLabel->setText(QString("üì• ÈòüÂàó‰∏≠Êúâ %1 ‰∏™‰ªªÂä°").arg(queueSize));
}

void DownloadManagerPage::onTaskStarted(const DownloadService::DownloadTask& task)
{
    qDebug() << "‰ªªÂä°ÂºÄÂßã:" << task.identifier;
    m_statusLabel->setText(QString("‚è¨ Ê≠£Âú®‰∏ãËΩΩ: %1").arg(task.identifier));

    DownloadTaskItem* item = findTaskItem(task.identifier);
    if (item) {
        item->setStatus("Ê≠£Âú®‰∏ãËΩΩ...");
    }
}

void DownloadManagerPage::onTaskProgress(
    const DownloadService::DownloadTask& task,
    double progress,
    const QString& message)
{
    DownloadTaskItem* item = findTaskItem(task.identifier);
    if (item) {
        item->setProgress(progress);
        item->setStatus(message);
    }

    qDebug() << "ËøõÂ∫¶Êõ¥Êñ∞:" << task.identifier << progress << message;
}

void DownloadManagerPage::onTaskCompleted(
    const DownloadService::DownloadTask& task,
    const Song& song)
{
    qDebug() << "‰ªªÂä°ÂÆåÊàê:" << song.getTitle();
    qDebug() << "üìÅ Êñá‰ª∂‰øùÂ≠òÂú®:" << song.getLocalFilePath();

    moveTaskToHistory(task.identifier, true);

    int completed = m_downloadService->getCompletedCount();
    m_statusLabel->setText(QString("‚úÖ Â∑≤ÂÆåÊàê %1 ‰∏™‰∏ãËΩΩ").arg(completed));

    // Ê∑ªÂä†Âà∞ÂéÜÂè≤Ë°®Ê†º
    int row = m_historyTable->rowCount();
    m_historyTable->insertRow(row);
    m_historyTable->setItem(row, 0, new QTableWidgetItem("‚úÖ ÊàêÂäü"));
    m_historyTable->setItem(row, 1, new QTableWidgetItem(song.getTitle()));
    m_historyTable->setItem(row, 2, new QTableWidgetItem(song.getArtist()));
    m_historyTable->setItem(row, 3,
        new QTableWidgetItem(QDateTime::currentDateTime().toString("yyyy-MM-dd HH:mm")));
    m_historyTable->setItem(row, 4, new QTableWidgetItem("‰∏ãËΩΩÊàêÂäü"));
}

void DownloadManagerPage::onTaskFailed(
    const DownloadService::DownloadTask& task,
    const QString& error)
{
    qDebug() << "‰ªªÂä°Â§±Ë¥•:" << task.identifier << error;

    moveTaskToHistory(task.identifier, false);

    int failed = m_downloadService->getFailedCount();
    m_statusLabel->setText(QString("‚ùå %1 ‰∏™‰ªªÂä°Â§±Ë¥•").arg(failed));

    // Ê∑ªÂä†Âà∞ÂéÜÂè≤Ë°®Ê†º
    int row = m_historyTable->rowCount();
    m_historyTable->insertRow(row);
    m_historyTable->setItem(row, 0, new QTableWidgetItem("‚ùå Â§±Ë¥•"));
    m_historyTable->setItem(row, 1, new QTableWidgetItem(task.identifier));
    m_historyTable->setItem(row, 2, new QTableWidgetItem("-"));
    m_historyTable->setItem(row, 3,
        new QTableWidgetItem(QDateTime::currentDateTime().toString("yyyy-MM-dd HH:mm")));
    m_historyTable->setItem(row, 4, new QTableWidgetItem(error));
}

void DownloadManagerPage::addTaskToQueue(const DownloadService::DownloadTask& task)
{
    DownloadTaskItem* taskItem = new DownloadTaskItem(task, this);
    m_taskItems.insert(task.identifier, taskItem);

    QListWidgetItem* listItem = new QListWidgetItem(m_queueList);
    listItem->setSizeHint(taskItem->sizeHint());
    m_queueList->addItem(listItem);
    m_queueList->setItemWidget(listItem, taskItem);
}

void DownloadManagerPage::moveTaskToHistory(const QString& identifier, bool success)
{
    DownloadTaskItem* item = m_taskItems.value(identifier, nullptr);
    if (!item) return;

    for (int i = 0; i < m_queueList->count(); ++i) {
        QListWidgetItem* listItem = m_queueList->item(i);
        if (m_queueList->itemWidget(listItem) == item) {
            m_queueList->takeItem(i);
            break;
        }
    }

    m_taskItems.remove(identifier);
    item->deleteLater();
}

DownloadTaskItem* DownloadManagerPage::findTaskItem(const QString& identifier) const
{
    return m_taskItems.value(identifier, nullptr);
}

void DownloadManagerPage::loadDefaultSettings()
{
    if (!m_qualityCombo) {
        qCritical() << "‚ùå loadDefaultSettings: m_qualityCombo ‰∏∫Á©∫ÔºÅ";
        return;
    }

    AppConfig& config = AppConfig::instance();

    // ËÆæÁΩÆÈªòËÆ§Èü≥Ë¥®
    QString defaultPreset = config.getDefaultQualityPreset();
    int presetIndex = m_qualityCombo->findData(defaultPreset);
    qDebug() << "üìã Âä†ËΩΩÈªòËÆ§Èü≥Ë¥®ËÆæÁΩÆ...";
    qDebug() << "  - ÈÖçÁΩÆ‰∏≠ÁöÑÈªòËÆ§Èü≥Ë¥®:" << defaultPreset;
    qDebug() << "  - ÂΩìÂâçÈÄâÊã©Âô®ÈÄâÈ°πÊï∞Èáè:" << m_qualityCombo->count();
    for (int i = 0; i < m_qualityCombo->count(); ++i) {
        qDebug() << "    [" << i << "]"
            << m_qualityCombo->itemData(i).toString()
            << "-" << m_qualityCombo->itemText(i);
    }
    if (presetIndex >= 0) {
        m_qualityCombo->blockSignals(true);
        m_qualityCombo->setCurrentIndex(presetIndex);
        m_qualityCombo->blockSignals(false);

        qDebug() << "‚úÖ ÈªòËÆ§Èü≥Ë¥®Â∑≤ËÆæÁΩÆ‰∏∫Ôºö" << m_qualityCombo->currentText()
            << "(" << defaultPreset << ")";
    }
    else {
        qWarning() << "‚ö†Ô∏è Êú™ÊâæÂà∞Èü≥Ë¥®È¢ÑËÆæÔºö" << defaultPreset;
        qWarning() << "  - ÂèØËÉΩÁöÑÂéüÂõ†ÔºöËÆæÁΩÆÈ°µÈù¢ÁöÑÈÄâÈ°π‰∏é‰∏ãËΩΩÁÆ°ÁêÜÈ°µÈù¢‰∏ç‰∏ÄËá¥";
        qWarning() << "  - Â∞Ü‰ΩøÁî®ÈªòËÆ§ÈÄâÈ°πÔºö" << m_qualityCombo->itemText(0);
    }

    qDebug() << "‚úÖ ‰∏ãËΩΩÁÆ°ÁêÜÈ°µÈù¢Â∑≤Â∫îÁî®ÈÖçÁΩÆ";
}

void DownloadManagerPage::onSettingsChanged()
{
    qDebug() << "üîÑ ‰∏ãËΩΩÁÆ°ÁêÜÈ°µÈù¢Êî∂Âà∞ÈÖçÁΩÆÂèòÊõ¥‰ø°Âè∑";
    loadDefaultSettings();

    // Êõ¥Êñ∞Áä∂ÊÄÅÊ†èÊòæÁ§∫ÁöÑ‰∏ãËΩΩË∑ØÂæÑ
    QString downloadPath = AppConfig::instance().getDownloadPath();
    m_statusLabel->setText(QString("üí§ Á≠âÂæÖ‰ªªÂä° | üìÅ %1").arg(downloadPath));

    qDebug() << "‚úÖ ‰∏ãËΩΩÁÆ°ÁêÜÈ°µÈù¢Â∑≤Âà∑Êñ∞ÈÖçÁΩÆ";
    qDebug() << "  - ÂΩìÂâçÈÄâ‰∏≠Èü≥Ë¥®Ôºö" << m_qualityCombo->currentText();
    qDebug() << "  - ‰∏ãËΩΩË∑ØÂæÑÔºö" << downloadPath;
}
