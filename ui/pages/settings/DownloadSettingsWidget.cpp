#include "DownloadSettingsWidget.h"
#include "../../../common/AppConfig.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QLabel>
#include <QFileDialog>
#include <QMessageBox>
#include <QDebug>

DownloadSettingsWidget::DownloadSettingsWidget(QWidget* parent)
    : QWidget(parent)
{
    setupQualityFormatMapping(); 
    setupUI();
    setupStyles();
}

void DownloadSettingsWidget::setupQualityFormatMapping()
{
    m_qualityToFormatMap["high_quality_mp3"] = AudioFormat::MP3;
    m_qualityToFormatMap["medium_quality_mp3"] = AudioFormat::MP3;
    m_qualityToFormatMap["lossless_flac"] = AudioFormat::FLAC;
    m_qualityToFormatMap["small_size_opus"] = AudioFormat::OPUS;
    m_qualityToFormatMap["lossless_wav"] = AudioFormat::WAV;
    m_qualityToFormatMap["best_quality"] = AudioFormat::FLAC; 

    qDebug() << "‚úÖ Èü≥Ë¥®-Ê†ºÂºèÊò†Â∞ÑË°®Â∑≤Âª∫Á´ãÔºåÂÖ±" << m_qualityToFormatMap.size() << "È°π";
}

void DownloadSettingsWidget::setupUI()
{
    QVBoxLayout* mainLayout = new QVBoxLayout(this);
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mainLayout->setSpacing(16);

    QGroupBox* downloadGroup = new QGroupBox("üìÅ ‰∏ãËΩΩËÆæÁΩÆ");
    downloadGroup->setObjectName("settingsGroup");
    QVBoxLayout* downloadLayout = new QVBoxLayout(downloadGroup);
    downloadLayout->setSpacing(12);

    // ========== ‰∏ãËΩΩË∑ØÂæÑ ==========
    QHBoxLayout* downloadPathLayout = new QHBoxLayout();
    QLabel* downloadPathLabel = new QLabel("‰∏ãËΩΩË∑ØÂæÑ:");
    downloadPathLabel->setFixedWidth(100);
    downloadPathLabel->setObjectName("settingsLabel");

    m_downloadPathInput = new QLineEdit();
    m_downloadPathInput->setObjectName("settingsInput");
    m_downloadPathInput->setPlaceholderText("ÈÄâÊã©‰∏ãËΩΩÊñá‰ª∂Â§π");

    m_browseDownloadPathBtn = new QPushButton("üìÅ ÊµèËßà");
    m_browseDownloadPathBtn->setObjectName("browseBtn");
    m_browseDownloadPathBtn->setFixedWidth(80);

    downloadPathLayout->addWidget(downloadPathLabel);
    downloadPathLayout->addWidget(m_downloadPathInput);
    downloadPathLayout->addWidget(m_browseDownloadPathBtn);

    // ========== ÈªòËÆ§Èü≥Ë¥® ==========
    QHBoxLayout* qualityLayout = new QHBoxLayout();
    QLabel* qualityLabel = new QLabel("ÈªòËÆ§Èü≥Ë¥®:");
    qualityLabel->setFixedWidth(100);
    qualityLabel->setObjectName("settingsLabel");

    m_defaultQualityCombo = new QComboBox();
    m_defaultQualityCombo->addItem("üåü ÊúÄ‰Ω≥Èü≥Ë¥® (Ëá™Âä®)", "best_quality");        // 1. ÊúÄ‰Ω≥
    m_defaultQualityCombo->addItem("üéº Êó†ÊçüÈü≥Ë¥® WAV", "lossless_wav");         // 2. WAV Êó†Êçü
    m_defaultQualityCombo->addItem("üéµ Êó†ÊçüÈü≥Ë¥® FLAC", "lossless_flac");       // 3. FLAC Êó†Êçü
    m_defaultQualityCombo->addItem("üéß È´òÂìÅË¥® MP3 (320kbps)", "high_quality_mp3");  // 4. È´òÂìÅË¥®
    m_defaultQualityCombo->addItem("üé∂ Ê†áÂáÜ MP3 (192kbps)", "medium_quality_mp3");  // 5. Ê†áÂáÜ
    m_defaultQualityCombo->addItem("üéπ Â∞èÊñá‰ª∂ OPUS", "small_size_opus");        // 6. ÊúÄÂ∞è

    qualityLayout->addWidget(qualityLabel);
    qualityLayout->addWidget(m_defaultQualityCombo);
    qualityLayout->addStretch();

    // ========== ÈªòËÆ§Ê†ºÂºèÔºàÂè™ËØªÊòæÁ§∫Ôºâ ==========
    QHBoxLayout* formatLayout = new QHBoxLayout();
    QLabel* formatLabel = new QLabel("ÂØπÂ∫îÊ†ºÂºè:");
    formatLabel->setFixedWidth(100);
    formatLabel->setObjectName("settingsLabel");

    m_defaultFormatCombo = new QComboBox();
    m_defaultFormatCombo->setObjectName("settingsCombo");
    m_defaultFormatCombo->addItem("MP3", static_cast<int>(AudioFormat::MP3));
    m_defaultFormatCombo->addItem("M4A", static_cast<int>(AudioFormat::M4A));
    m_defaultFormatCombo->addItem("FLAC", static_cast<int>(AudioFormat::FLAC));
    m_defaultFormatCombo->addItem("OPUS", static_cast<int>(AudioFormat::OPUS));
    m_defaultFormatCombo->addItem("WAV", static_cast<int>(AudioFormat::WAV));  // üî• Êñ∞Â¢û WAV

    m_defaultFormatCombo->setEnabled(false);
    m_defaultFormatCombo->setToolTip("Ê†ºÂºèÁî±Èü≥Ë¥®È¢ÑËÆæËá™Âä®ÂÜ≥ÂÆö");

    QLabel* formatHint = new QLabel("(Ëá™Âä®Ê†πÊçÆÈü≥Ë¥®ËÆæÁΩÆ)");
    formatHint->setObjectName("hintLabel");

    formatLayout->addWidget(formatLabel);
    formatLayout->addWidget(m_defaultFormatCombo);
    formatLayout->addWidget(formatHint);
    formatLayout->addStretch();

    // ========== Âπ∂Ë°å‰∏ãËΩΩ‰ªªÂä°Êï∞ ==========
    QHBoxLayout* concurrentLayout = new QHBoxLayout();
    QLabel* concurrentLabel = new QLabel("Âπ∂Ë°å‰∏ãËΩΩ:");
    concurrentLabel->setFixedWidth(100);
    concurrentLabel->setObjectName("settingsLabel");

    m_maxConcurrentDownloadsSpin = new QSpinBox();
    m_maxConcurrentDownloadsSpin->setObjectName("settingsSpin");
    m_maxConcurrentDownloadsSpin->setRange(1, 10);
    m_maxConcurrentDownloadsSpin->setValue(3);
    m_maxConcurrentDownloadsSpin->setSuffix(" ‰∏™‰ªªÂä°");
    m_maxConcurrentDownloadsSpin->setButtonSymbols(QSpinBox::PlusMinus);

    QLabel* concurrentHint = new QLabel("(ÂêåÊó∂ËøõË°åÁöÑ‰∏ãËΩΩ‰ªªÂä°Êï∞Èáè)");
    concurrentHint->setObjectName("hintLabel");

    concurrentLayout->addWidget(concurrentLabel);
    concurrentLayout->addWidget(m_maxConcurrentDownloadsSpin);
    concurrentLayout->addWidget(concurrentHint);
    concurrentLayout->addStretch();

    // ========== Ê∑ªÂä†Âà∞‰∏ªÂ∏ÉÂ±Ä ==========
    downloadLayout->addLayout(downloadPathLayout);
    downloadLayout->addLayout(qualityLayout);
    downloadLayout->addLayout(formatLayout);
    downloadLayout->addLayout(concurrentLayout);

    mainLayout->addWidget(downloadGroup);
    mainLayout->addStretch();

    // ========== ËøûÊé•‰ø°Âè∑ ==========
    connect(m_browseDownloadPathBtn, &QPushButton::clicked,
        this, &DownloadSettingsWidget::onBrowseDownloadPathClicked);

    connect(m_defaultQualityCombo, QOverload<int>::of(&QComboBox::currentIndexChanged),
        this, &DownloadSettingsWidget::onQualityPresetChanged);
}

void DownloadSettingsWidget::setupStyles()
{
    
}

void DownloadSettingsWidget::onQualityPresetChanged(int index)
{
    if (index < 0) return;

    QString preset = m_defaultQualityCombo->itemData(index).toString();

    if (m_qualityToFormatMap.contains(preset)) {
        AudioFormat format = m_qualityToFormatMap[preset];

        int formatIndex = m_defaultFormatCombo->findData(static_cast<int>(format));
        if (formatIndex >= 0) {
            m_defaultFormatCombo->setCurrentIndex(formatIndex);

            qDebug() << "üîÑ Èü≥Ë¥®ÂèòÊõ¥ËÅîÂä®Ôºö" << preset
                << "‚Üí" << m_defaultFormatCombo->currentText();
        }
    }
    else {
        qWarning() << "‚ö†Ô∏è Êú™ÊâæÂà∞Èü≥Ë¥®È¢ÑËÆæÂØπÂ∫îÁöÑÊ†ºÂºèÔºö" << preset;
    }
}

void DownloadSettingsWidget::loadSettings()
{
    AppConfig& config = AppConfig::instance();

    m_downloadPathInput->setText(config.getDownloadPath());

    QString qualityPreset = config.getDefaultQualityPreset();
    int qualityIndex = m_defaultQualityCombo->findData(qualityPreset);
    if (qualityIndex != -1) {
        m_defaultQualityCombo->setCurrentIndex(qualityIndex);
    }

    m_maxConcurrentDownloadsSpin->setValue(config.getMaxConcurrentDownloads());

    qDebug() << "‚úÖ ËÆæÁΩÆÂ∑≤Âä†ËΩΩÔºöÈü≥Ë¥®=" << qualityPreset
        << "ÔºåÊ†ºÂºè=" << m_defaultFormatCombo->currentText();
}

bool DownloadSettingsWidget::validate()
{
    if (m_downloadPathInput->text().isEmpty()) {
        QMessageBox::warning(this, "È™åËØÅÂ§±Ë¥•", "ËØ∑ÈÄâÊã©‰∏ãËΩΩË∑ØÂæÑ");
        return false;
    }

    return true;
}

void DownloadSettingsWidget::applySettings()
{
    AppConfig& config = AppConfig::instance();

    config.setDownloadPath(m_downloadPathInput->text());
    config.setDefaultQualityPreset(m_defaultQualityCombo->currentData().toString());

    QString preset = m_defaultQualityCombo->currentData().toString();
    if (m_qualityToFormatMap.contains(preset)) {
        config.setDefaultAudioFormat(m_qualityToFormatMap[preset]);

        qDebug() << "‚úÖ ËÆæÁΩÆÂ∑≤‰øùÂ≠òÔºöÈü≥Ë¥®=" << preset
            << "ÔºåÊ†ºÂºè=" << static_cast<int>(m_qualityToFormatMap[preset]);
    }

    config.setMaxConcurrentDownloads(m_maxConcurrentDownloadsSpin->value());
}

void DownloadSettingsWidget::onBrowseDownloadPathClicked()
{
    QString dir = QFileDialog::getExistingDirectory(
        this,
        "ÈÄâÊã©‰∏ãËΩΩÁõÆÂΩï",
        m_downloadPathInput->text(),
        QFileDialog::ShowDirsOnly | QFileDialog::DontResolveSymlinks
    );

    if (!dir.isEmpty()) {
        m_downloadPathInput->setText(dir);
    }
}
